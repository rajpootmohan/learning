----------------- Pattern 1: Database per service -------------------------

Problem:
	What’s the database architecture in a microservices application?

Forces:
	1. Services must be loosely coupled so that they can be developed, deployed and scaled independently
	2. Some business transactions must enforce invariants that span multiple services. For example, the Place Order use case must verify that a new Order will not exceed the customer’s credit limit. Other business transactions, must update data owned by multiple services.
	3. Some business transactions need to query data that is owned by multiple services.
	4. Some queries must join data that is owned by multiple services
	5. Databases must sometimes be replicated and sharded in order to scale.
	6. Different services have different data storage requirements.

Solution:
	1. Keep each microservice’s persistent data private to that service and accessible only via its API. A service’s transactions only involve its database.
	2. The service’s database is effectively part of the implementation of that service. It cannot be accessed directly by other services.
	3. There are a few different ways to keep a service’s persistent data private. You do not need to provision a database server for each service. For example, if you are using a relational database then the options are:
		A. Private-tables-per-service – each service owns a set of tables that must only be accessed by that service
		B. Schema-per-service – each service has a database schema that’s private to that service
		C. Database-server-per-service – each service has it’s own database server.

Benefits:
	1. Helps ensure that the services are loosely coupled. Changes to one service’s database does not impact any other services.
	2. Each service can use the type of database that is best suited to its needs.

drawbacks:
	1. Implementing business transactions that span multiple services is not straightforward. Distributed transactions are best avoided because of the CAP theorem.
	2. Implementing queries that join data that is now in multiple databases is challenging.
	3. Complexity of managing multiple SQL and NoSQL databases

solutions:
	1. API Composition - the application performs the join rather than the database. For example, a service (or the API gateway) could retrieve a customer and their orders by first retrieving the customer from the customer service and then querying the order service to return the customer’s most recent orders.
	2. Command Query Responsibility Segregation (CQRS) - maintain one or more materialized views that contain data from multiple services. The views are kept by services that subscribe to events that each services publishes when it updates its data.

----------------- Pattern 2: Shared database ---------------------------------------------

Problem:
	What’s the database architecture in a microservices application?

Forces:
	1. Services must be loosely coupled so that they can be developed, deployed and scaled independently
	2. Some business transactions must enforce invariants that span multiple services. For example, the Place Order use case must verify that a new Order will not exceed the customer’s credit limit. Other business transactions, must update data owned by multiple services.
	3. Some business transactions need to query data that is owned by multiple services.
	4. Some queries must join data that is owned by multiple services
	5. Databases must sometimes be replicated and sharded in order to scale.
	6. Different services have different data storage requirements.

Solution:
	Use a (single) database that is shared by multiple services. Each service freely accesses data owned by other services using local ACID transactions.

Benefits:
	1. A developer uses familiar and straightforward ACID transactions to enforce data consistency
	2. A single database is simpler to operate

drawbacks:
	1. Development time coupling - a developer working on, for example, the OrderService will need to coordinate schema changes with the developers of other services that access the same tables.
	2. Runtime coupling - because all services access the same database they can potentially interfere with one another. For example, if long running CustomerService transaction holds a lock on the ORDER table then the OrderService will be blocked.
	3. Single database might not satisfy the data storage and access requirements of all services.

----------------- Pattern3 : Saga ---------------------------------------------

Problem:
	How to maintain data consistency across services?

Forces:
	1. 2PC is not an option

Solution:
	Implement each business transaction that spans multiple services as a saga. A saga is a sequence of local transactions. Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions.

Two ways of coordination sagas:
	1. Choreography
		Each local transaction publishes domain events that trigger local transactions in other services. An e-commerce application that uses this approach would create an order using a choreography-based saga that consists of the following steps:
			A. The Order Service creates an Order in a pending state and publishes an OrderCreated event
			B. The Customer Service receives the event attempts to reserve credit for that Order. It publishes either a Credit Reserved event or a CreditLimitExceeded event.
			C. The Order Service receives the event and changes the state of the order to either approved or cancelled
	2. Orchestration 
		An orchestrator (object) tells the participants what local transactions to execute. An e-commerce application that uses this approach would create an order using an orchestration-based saga that consists of the following steps:
			A. The Order Service creates an Order in a pending state and creates a CreateOrderSaga
			B. The CreateOrderSaga sends a ReserveCredit command to the Customer Service
			C. The Customer Service attempts to reserve credit for that Order and sends back a reply
			D. The CreateOrderSaga receives the reply and sends either an ApproveOrder or RejectOrder command to the Order Service
			E. The Order Service changes the state of the order to either approved or cancelled

Benefits:
	1. It enables an application to maintain data consistency across multiple services without using distributed transactions

drawbacks:
	1. The programming model is more complex. For example, a developer must design compensating transactions that explicitly undo changes made earlier in a saga.
	2. In order to be reliable, a service must atomically update its database and publish a message/event. It cannot use the traditional mechanism of a distributed transaction that spans the database and the message broker. 

----------------- Pattern 4 : API Composition ---------------------------------------------

Problem:
	How to implement queries in a microservice architecture?

Solution:
	Implement a query by defining an API Composer, which invoking the services that own the data and performs an in-memory join of the results.

Example:
	An API Gateway often does API composition.

Benefits:
	1. It a simple way to query data in a microservice architecture

drawbacks:
	1. Some queries would result in inefficient, in-memory joins of large datasets.

----------------- Pattern 5 : Command Query Responsibility Segregation (CQRS) -------------	

Problem:
	How to implement a query that retrieves data from multiple services in a microservice architecture?

Solution:
	Define a view database, which is a read-only replica that is designed to support that query. The application keeps the replica up to data by subscribing to Domain events published by the service that own the data.

Benefits:
	1. Supports multiple denormalized views that are scalable and performant
	2. Improved separation of concerns = simpler command and query models
	3. Necessary in an event sourced architecture

drawbacks:
	1. Increased complexity
	2. Potential code duplication
	3. Replication lag/eventually consistent views

----------------- Pattern 6 : Application publishes events -------------	
Also known as: Transaction outbox pattern

Problem:
	How to reliably/atomically update the database and publish messages/events.

Solution:
	1. The application that uses a relational database inserts messages/events into an outbox table (e.g. MESSAGE) as part of the local transaction.
	2. An application that uses a NoSQL database appends the messages/events to attribute of the record (e.g. document or item) being updated.
	3. A separate Message Relay process publishes the events inserted into database to a message broker.

Benefits:
	1. High level domain events
	2. No 2PC

drawbacks:
	1. Potentially error prone since the developer might forget to publish the message/event after updating the database.





